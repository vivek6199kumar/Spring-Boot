package com.security.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.security.service.CustomUserDetailServcie;

@Configuration
@EnableWebSecurity
//@EnableGlobalMethodSecurity(prePostEnabled = true)
public class MySecurityConfig extends WebSecurityConfigurerAdapter {
	@Autowired
	private CustomUserDetailServcie customUserDetailServcie;
	
	@Override protected void configure(HttpSecurity http) throws Exception { http
	  .csrf() .disable() .authorizeRequests()
	  //.antMatchers("/user/**").hasRole("admin")
	  //.antMatchers("/form/**").hasRole("normal") .anyRequest() .authenticated()
	  .and() //.formLogin(); .httpBasic();
	  
	  }
	 

	// Creating userName and password configure

	
	  @Override protected void configure(AuthenticationManagerBuilder auth) throws
	  Exception {
	  
	  //
		auth.inMemoryAuthentication().withUser("vivek").password(this.passwordEn().encode("host")).roles("admin"); //
		auth.userDetailsService(customUserDetailServcie).passwordEncoder(passwordEn());

	}
	 

	// To encode password
	
	@Bean
	public BCryptPasswordEncoder passwordEn() { 
		//return NoOpPasswordEncoder.getInstance();
		return new BCryptPasswordEncoder(10);
	}

}
