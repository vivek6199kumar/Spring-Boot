package com.security.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
@EnableWebSecurity
public class MySecurityConfig extends WebSecurityConfigurerAdapter {


	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http

				// .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()).and()
				// .cors().disable()
				.csrf()
				.disable()
				.authorizeRequests()
				// .antMatchers("/user/**").hasRole("admin")
				// .antMatchers("/form/**").hasRole("normal")
				.anyRequest()
				.authenticated()
				.and()
				.httpBasic();

	}

	// Creating userName and password configure
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		auth.
		    inMemoryAuthentication().withUser("vivek").password(this.passwordEncoder().encode("host")).roles("admin");
	}

	// To encode password
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		// return NoOpPasswordEncoder.getInstance();
		return new BCryptPasswordEncoder(10);
	}

}